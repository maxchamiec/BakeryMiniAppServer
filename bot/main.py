import asyncio
import logging
import json # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç json
import os
import re

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiohttp import web # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º web –¥–ª—è TCPSite

from .api_server import setup_api_server
from .config import BOT_TOKEN, BASE_WEBAPP_URL # –î–æ–±–∞–≤–ª–µ–Ω BASE_WEBAPP_URL
from .keyboards import back_to_menu, generate_main_menu

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(
    token=BOT_TOKEN
)
dp = Dispatcher()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PRODUCTS_DATA_FILE = os.path.join(BASE_DIR, 'data', 'products_scraped.json')
logger.info(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö: {PRODUCTS_DATA_FILE}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
products_data = {}

async def load_products_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    global products_data
    if os.path.exists(PRODUCTS_DATA_FILE):
        try:
            with open(PRODUCTS_DATA_FILE, 'r', encoding='utf-8') as f:
                products_data = json.load(f)
            logger.info(f"–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {PRODUCTS_DATA_FILE}. –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(products_data)}")
            for category, products in products_data.items():
                logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': –Ω–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞ '{PRODUCTS_DATA_FILE}': {e}")
            products_data = {}
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö: {e}")
            products_data = {}
    else:
        logger.warning(f"–§–∞–π–ª '{PRODUCTS_DATA_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–µ—Ä.")
        products_data = {}


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
# –ö–ª—é—á: chat_id, –ó–Ω–∞—á–µ–Ω–∏–µ: {
#   'items': { product_unique_id: {id, name, price, quantity, ...} },
#   'message_ids': [],
#   'summary_message_id': None
# }
cart_state = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã
def parse_price(price_str):
    if not price_str or is_na(price_str):
        return 0.0
    cleaned_price = re.sub(r'[^\d,.]', '', str(price_str)).replace(',', '.')
    try:
        return float(cleaned_price)
    except ValueError:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É: {price_str} (–æ—á–∏—â–µ–Ω–Ω–∞—è: {cleaned_price})")
        return 0.0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ N/A (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤)
def is_na(value):
    return not value or str(value).strip().lower() == 'n/a'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å product_unique_id
def get_product_unique_id(category_key, index):
    return f"{category_key}_{index}"

def get_product_data_from_id(product_id):
    parts = product_id.split('_')
    if len(parts) >= 2 and parts[-1].isdigit():
        product_index = int(parts[-1])
        category_key = "_".join(parts[:-1])

        if category_key in products_data and 0 <= product_index < len(products_data[category_key]):
            return products_data[category_key][product_index], category_key, product_index
    return None, None, None


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def clear_user_cart_messages(chat_id: int):
    # –£–¥–∞–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if chat_id in cart_state and 'summary_message_id' in cart_state[chat_id] and cart_state[chat_id]['summary_message_id']:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=cart_state[chat_id]['summary_message_id'])
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã {cart_state[chat_id]['summary_message_id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        del cart_state[chat_id]['summary_message_id'] # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if chat_id in cart_state and 'message_ids' in cart_state[chat_id]:
        for message_id in cart_state[chat_id]['message_ids']:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        cart_state[chat_id]['message_ids'] = [] # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ (–¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞)
def get_current_cart_items_count(chat_id: int) -> int:
    if chat_id not in cart_state or 'items' not in cart_state[chat_id]:
        return 0
    # –°—É–º–º–∏—Ä—É–µ–º quantity –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    return sum(item['quantity'] for item in cart_state[chat_id]['items'].values())


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
async def send_or_update_overall_cart_summary(chat_id: int):
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    cart_items = cart_state.get(chat_id, {}).get('items', {})

    total_price = 0.0
    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ—Ä–∑–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    for product_id, item_data in cart_items.items():
        if item_data['quantity'] > 0: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0
            total_price += item_data['price'] * item_data['quantity']

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã - –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" —É–¥–∞–ª–µ–Ω–∞
    overall_cart_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="proceed_to_checkout")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
    ])

    summary_text = f"<b>üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price:.2f} —Ä.</b>"

    summary_message_id = cart_state[chat_id].get('summary_message_id')

    try:
        if summary_message_id:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=summary_message_id,
                text=summary_text,
                reply_markup=overall_cart_keyboard,
                parse_mode=ParseMode.HTML
            )
        else:
            sent_message = await bot.send_message(
                chat_id=chat_id,
                text=summary_text,
                reply_markup=overall_cart_keyboard,
                parse_mode=ParseMode.HTML
            )
            cart_state[chat_id]['summary_message_id'] = sent_message.message_id
            cart_state[chat_id]['message_ids'].append(sent_message.message_id) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è {chat_id}: {e}")


@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    user_id = message.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if user_id not in cart_state:
        cart_state[user_id] = {'items': {}, 'message_ids': [], 'summary_message_id': None}

    current_cart_count = get_current_cart_items_count(user_id)

    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ–∫–∞—Ä–Ω—é –î—Ä–∞–∂–∏–Ω–∞!</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=generate_main_menu(current_cart_count),
        parse_mode=ParseMode.HTML
    )

@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: Message):
    await clear_user_cart_messages(message.chat.id) # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
    text = (
        "<b>–û –ø–µ–∫–∞—Ä–Ω–µ –î—Ä–∞–∂–∏–Ω–∞</b>\n\n"
        "–ù–∞—à–∞ –ø–µ–∫–∞—Ä–Ω—è ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. "
        "–ú—ã –≥–æ—Ç–æ–≤–∏–º —Ö–ª–µ–± –∏ –≤—ã–ø–µ—á–∫—É –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º —Ä–µ—Ü–µ–ø—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.\n\n"
        "üåæ –†–µ–º–µ—Å–ª–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
        "üçû –°–≤–µ–∂–∞–π—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "‚ù§Ô∏è –õ—é–±–æ–≤—å –∫ —Å–≤–æ–µ–º—É –¥–µ–ª—É\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://drazhin.by/o-pekarne"
    )
    await message.answer(text, reply_markup=back_to_menu, parse_mode=ParseMode.HTML)

@dp.message(F.text == "üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞")
async def show_addresses(message: Message):
    await clear_user_cart_messages(message.chat.id) # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
    text = (
        "<b>üìç –ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã</b>\n\n"
        "üè¨ <b>–¢–¶ \"Green City\"</b>\n"
        "—É–ª. –ü—Ä–∏—Ç—ã—Ü–∫–æ–≥–æ, 156, –Ω–∞–ø—Ä–æ—Ç–∏–≤ –ì—Ä–∏–Ω –°–∏—Ç–∏\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | <a href='https://yandex.com/maps/-/CHTIEUl9'>Yandex</a>\n\n"

        "üè¨ <b>–¢–¶ \"–ó–∞–º–æ–∫\"</b>\n"
        "–ø—Ä‚Äë—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, 65, 1 —ç—Ç–∞–∂ –≤–æ–∑–ª–µ ¬´–ò–≤ –†–æ—à–µ¬ª\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | <a href='https://yandex.com/maps/-/CHTIEJ3Z'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –õ. –ë–µ–¥—ã, 26</b>\n"
        "–≤—Ö–æ–¥ –≤ WINE&SPIRITS\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | <a href='https://yandex.com/maps/-/CHTIEXnX'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –ú—Å—Ç–∏—Å–ª–∞–≤—Ü–∞, 8</b>\n"
        "–≤ –ú–∞—è–∫ –ú–∏–Ω—Å–∫–∞, –≤—Ö–æ–¥ —Å–æ –¥–≤–æ—Ä–∞\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | <a href='https://yandex.com/maps/-/CHTIIYme'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –õ—É—á–µ–Ω–∫–∞, 1</b>\n"
        "–≤ –ñ–ö ¬´Minsk World¬ª\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | <a href='https://yandex.com/maps/-/CHTIII6lt'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –ê–≤–∏–∞—Ü–∏–æ–Ω–Ω–∞—è, 8</b>\n"
        "–ö–æ–ø–∏—â–µ, –ù–æ–≤–∞—è –ë–æ—Ä–æ–≤–∞—è\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | <a href='https://yandex.com/maps/-/CHTIIDl~'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –ù–æ–≤–æ–≤–∏–ª–µ–Ω—Å–∫–∞—è, 45</b>\n"
        "Minsk\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | <a href='https://yandex.com/maps/-/CHTIIDl~'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –ú–æ—Ä—Å–∫–æ–π —Ä–∏—Ñ 1/4</b>\n"
        "–∞/–≥ –†–∞—Ç–æ–º–∫–∞, –ñ–ö ¬´–ü–∏—Ä—Å¬ª\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | <a href='https://yandex.com/maps/-/CHTIMRKA'>Yandex</a>\n\n"

        "üè† <b>–≥. –ó–∞—Å–ª–∞–≤–ª—å, —É–ª. –í–æ–∫–∑–∞–ª—å–Ω–∞—è, 11</b>\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | <a href='https://yandex.com/maps/-/CHTIMU9Q'>Yandex</a>\n"
    )
    await message.answer(text, reply_markup=back_to_menu, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@dp.message(F.text == "‚ö° –û –¥–æ—Å—Ç–∞–≤–∫–µ")
async def show_delivery_info(message: Message):
    await clear_user_cart_messages(message.chat.id) # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
    text = (
        "<b>‚ö° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ</b>\n\n"
        "<b>–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:</b>\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä–æ–º - <b>70 —Ä—É–±–ª–µ–π</b>.\n"
        "–í –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –∏ –ø—Ä–µ–¥–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ - <b>200 —Ä—É–±–ª–µ–π</b>.\n"
        "–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ —Å <b>12:30 –¥–æ 17:00</b>, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π.\n\n"
        "<b>–°–∞–º–æ–≤—ã–≤–æ–∑:</b>\n"
        "–ó–∞–∫–∞–∑ –Ω–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –≤ –¥–µ–Ω—å –ø–æ–∫—É–ø–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Å–∏—Å—Ç–µ–º—ã –ï–†–ò–ü.\n"
        "–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –∏ –µ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –ø—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: "
        "<a href='tel:+375291172577'>+375 (29) 117-25-77</a>\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ: https://drazhin.by/delivery"
    )
    await message.answer(text, reply_markup=back_to_menu, parse_mode=ParseMode.HTML, disable_web_page_preview=True)


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main(message: Message):
    user_id = message.from_user.id
    current_cart_count = get_current_cart_items_count(user_id)
    await clear_user_cart_messages(message.chat.id) # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=generate_main_menu(current_cart_count)
    )

@dp.callback_query(F.data == "proceed_to_checkout")
async def handle_proceed_to_checkout(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in cart_state or not cart_state[user_id]['items']:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return

    # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º Web App –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    await clear_user_cart_messages(callback.message.chat.id)

    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callbackQuery, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"

    await bot.send_message(
        chat_id=callback.message.chat.id,
        text="–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞...",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ Web App", web_app=WebAppInfo(url=f"{BASE_WEBAPP_URL}?view=checkout"))]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ Web App'"
        )
    )

@dp.callback_query(F.data == "clear_cart")
async def handle_clear_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart_state[user_id]['items'] = {} # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞
    await clear_user_cart_messages(callback.message.chat.id) # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã

    current_cart_count = get_current_cart_items_count(user_id)
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", show_alert=True)
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—É—Å—Ç—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –∫–æ—Ä–∑–∏–Ω—ã
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
        reply_markup=generate_main_menu(current_cart_count)
    )


@dp.message(F.web_app_data)
async def handle_web_app_data(message: Message):
    user_id = message.from_user.id
    # Ensure cart_state for the user is initialized
    if user_id not in cart_state:
        cart_state[user_id] = {'items': {}, 'message_ids': [], 'summary_message_id': None}

    try:
        web_app_data = json.loads(message.web_app_data.data)
        data_type = web_app_data.get('type')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {data_type}")

        if data_type == 'order_submission':
            order_items = web_app_data.get('items', [])
            total_price = web_app_data.get('totalPrice', '0.00')
            delivery_method = web_app_data.get('deliveryMethod', '–ù–µ —É–∫–∞–∑–∞–Ω')

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
            order_summary = f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {web_app_data.get('firstName')} {web_app_data.get('lastName')}</b>\n"
            order_summary += f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{web_app_data.get('phoneNumber')}</code>\n"
            order_summary += f"Email: <code>{web_app_data.get('email')}</code>\n"
            order_summary += f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {web_app_data.get('deliveryDate')}\n"
            order_summary += f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n"

            if delivery_method == 'courier':
                order_summary += f"–ì–æ—Ä–æ–¥: {web_app_data.get('city')}\n"
                order_summary += f"–ê–¥—Ä–µ—Å: {web_app_data.get('addressLine')}\n"
            else: # pickup
                order_summary += f"–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: {web_app_data.get('pickupAddress')}\n"

            if web_app_data.get('comment'):
                order_summary += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {web_app_data.get('comment')}\n"

            order_summary += "\n<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
            for item in order_items:
                order_summary += f"- {item.get('name')} ({item.get('quantity')} —à—Ç.) - {item.get('lineTotal'):.2f} —Ä.\n"
            order_summary += f"\n<b>–ò—Ç–æ–≥–æ: {total_price} —Ä.</b>"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n{order_summary}",
                parse_mode=ParseMode.HTML
            )
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            cart_state[user_id]['items'] = {}
            await clear_user_cart_messages(user_id) # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—É—Å—Ç—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –∫–æ—Ä–∑–∏–Ω—ã
            current_cart_count = get_current_cart_items_count(user_id)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ ÔøΩ",
                reply_markup=generate_main_menu(current_cart_count)
            )

            logger.info(f"–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

        elif data_type == 'cart_sync':
            # NEW: Handle cart synchronization
            new_cart_items_list = web_app_data.get('items', [])

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ price - —ç—Ç–æ —á–∏—Å–ª–æ
            updated_cart_items = {}
            for item in new_cart_items_list:
                item_id = item.get('id')
                if item_id:
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É –≤ float, –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç—Ä–æ–∫–∞
                    try:
                        item_price = float(item.get('price', 0))
                    except (ValueError, TypeError):
                        item_price = 0.0 # Fallback
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {item_id}: {item.get('price')}")

                    updated_cart_items[item_id] = {
                        'id': item_id,
                        'name': item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'),
                        'price': item_price,
                        'quantity': item.get('quantity', 0),
                        'image_url': item.get('image_url'),
                        'url': item.get('url'),
                        'weight': item.get('weight'),
                        'availability_days': item.get('availability_days')
                    }

            cart_state[user_id]['items'] = updated_cart_items
            logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(updated_cart_items)}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –∫–æ—Ä–∑–∏–Ω—ã
            current_cart_count = get_current_cart_items_count(user_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —á–∞—Ç–µ, –∫–æ–≥–¥–∞ Web App –∑–∞–∫—Ä–æ–µ—Ç—Å—è.
            await bot.send_message(
                chat_id=user_id,
                text="üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ
                reply_markup=generate_main_menu(current_cart_count),
                parse_mode=ParseMode.HTML
            )
            # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Web App –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            # –ù–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ ID —Å–æ–æ–±—â–µ–Ω–∏—è Web App –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é.

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App: {data_type}")
            await message.answer("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App.")

    except json.JSONDecodeError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App: {message.web_app_data.data}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception: # Changed to log the exception
        logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_web_app_data") # Log full traceback
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–æ—Ç–µ –Ω–∞ –∫–ª—é—á–∏ –≤ JSON-—Ñ–∞–π–ª–µ
# –ü–ï–†–ï–ú–ï–©–ï–ù–û –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨ –í–ò–î–ò–ú–û–°–¢–ò
CATEGORY_MAP = {
    "ü•® –í—ã–ø–µ—á–∫–∞": "bakery",
    "ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω—ã": "croissants",
    "üçû –†–µ–º–µ—Å–ª–µ–Ω–Ω—ã–π —Ö–ª–µ–±": "artisan_bread",
    "üç∞ –î–µ—Å–µ—Ä—Ç—ã": "desserts",
    "üõí –ö–æ—Ä–∑–∏–Ω–∞": "cart"
}

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π
@dp.message(F.text)
async def block_text_input(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –∫–æ–º–∞–Ω–¥
    # CATEGORY_MAP.keys() —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä "bakery"
    # generate_main_menu –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ReplyKeyboardMarkup, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    known_texts = set(CATEGORY_MAP.keys())
    known_texts.update(["‚ÑπÔ∏è –û –Ω–∞—Å", "üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞", "‚ö° –û –¥–æ—Å—Ç–∞–≤–∫–µ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "/start"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç—É –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
    is_cart_button_text = re.match(r"üõí –ö–æ—Ä–∑–∏–Ω–∞(\s\(\d+\))?", message.text)

    if message.text not in known_texts and not is_cart_button_text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º üëá")


async def main():
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞...")
    await load_products_data()

    # –í–∫–ª—é—á–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è Web App –¥–∞–Ω–Ω—ã—Ö
    dp.message.register(handle_web_app_data, F.web_app_data)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    runner = await setup_api_server()
    port = int(os.environ.get("PORT", 8080)) # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8080
    site = web.TCPSite(runner, '0.0.0.0', port) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç
    await site.start()
    logger.info(f"API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ API —Å–µ—Ä–≤–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    bot_polling_task = asyncio.create_task(dp.start_polling(bot))

    try:
        await bot_polling_task
    except asyncio.CancelledError:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏.")
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        await runner.cleanup()
        logger.info("API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    asyncio.run(main())