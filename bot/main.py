import asyncio
import logging
import json
import os
import re

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiohttp import web # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º web –¥–ª—è TCPSite

from .api_server import setup_api_server # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è setup_api_server
from .config import BOT_TOKEN, BASE_WEBAPP_URL
from .keyboards import back_to_menu, generate_main_menu

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(
    token=BOT_TOKEN
)
dp = Dispatcher()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PRODUCTS_DATA_FILE = os.path.join(BASE_DIR, 'data', 'products_scraped.json')
logger.info(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö: {PRODUCTS_DATA_FILE}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
products_data = {}

async def load_products_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    global products_data
    if os.path.exists(PRODUCTS_DATA_FILE):
        try:
            with open(PRODUCTS_DATA_FILE, 'r', encoding='utf-8') as f:
                products_data = json.load(f)
            logger.info(f"–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {PRODUCTS_DATA_FILE}. –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(products_data)}")
            for category, products in products_data.items():
                logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': –Ω–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞ '{PRODUCTS_DATA_FILE}': {e}")
            products_data = {} # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö: {e}")
            products_data = {}
    else:
        logger.warning(f"–§–∞–π–ª '{PRODUCTS_DATA_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.")
        products_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –∫–ª—é—á–∏ –≤ products_data
CATEGORY_MAP = {
    "ü•® –í—ã–ø–µ—á–∫–∞": "category_bakery",
    "ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω—ã": "category_croissants",
    "üçû –†–µ–º–µ—Å–ª–µ–Ω–Ω—ã–π —Ö–ª–µ–±": "category_artisan_bread",
    "üç∞ –î–µ—Å–µ—Ä—Ç—ã": "category_desserts"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_carts = {} # user_id: {product_id: quantity, ...}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_cart(user_id: int) -> dict:
    return user_carts.setdefault(user_id, {})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
def update_cart_item_quantity(user_id: int, product_id: str, quantity: int):
    cart = get_user_cart(user_id)
    if quantity <= 0:
        if product_id in cart:
            del cart[product_id]
    else:
        cart[product_id] = quantity
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {cart}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
def clear_user_cart(user_id: int):
    if user_id in user_carts:
        del user_carts[user_id]
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞.")

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def command_start_handler(message: Message) -> None:
    user_id = message.from_user.id
    cart_count = sum(get_user_cart(user_id).values())
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–µ–∫–∞—Ä–Ω–∏ –î—Ä–∞–∂–∏–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å.",
        reply_markup=generate_main_menu(cart_count)
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us_handler(message: Message) -> None:
    await message.answer(
        "–ü–µ–∫–∞—Ä–Ω—è –î—Ä–∞–∂–∏–Ω–∞ - —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å—é. –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—à–µ–π –≤—ã–ø–µ—á–∫–∏, —Ö–ª–µ–±–∞ –∏ –¥–µ—Å–µ—Ä—Ç–æ–≤. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏!",
        reply_markup=back_to_menu
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞"
@dp.message(F.text == "üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞")
async def our_addresses_handler(message: Message) -> None:
    await message.answer(
        "–ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞:\n"
        "üìç –≥. –ú–∏–Ω—Å–∫, —É–ª. –õ–µ–Ω–∏–Ω–∞, 5 (—Å—Ç. –º. –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è)\n"
        "üìç –≥. –ú–∏–Ω—Å–∫, –ø—Ä-—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, 9 (–¢–¶ Galleria Minsk)",
        reply_markup=back_to_menu
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û –¥–æ—Å—Ç–∞–≤–∫–µ"
@dp.message(F.text == "‚ö° –û –¥–æ—Å—Ç–∞–≤–∫–µ")
async def delivery_info_handler(message: Message) -> None:
    await message.answer(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:\n"
        "–ú—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –ú–∏–Ω—Å–∫—É. –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–π–æ–Ω–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=back_to_menu
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu_handler(message: Message) -> None:
    user_id = message.from_user.id
    cart_count = sum(get_user_cart(user_id).values())
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=generate_main_menu(cart_count)
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
@dp.message(F.web_app_data)
async def handle_web_app_data(message: Message):
    user_id = message.from_user.id
    web_app_data_raw = message.web_app_data.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {web_app_data_raw}")

    try:
        data = json.loads(web_app_data_raw)
        action = data.get('action')

        if action == 'update_cart':
            cart_items = data.get('cart', [])
            current_cart = get_user_cart(user_id)

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            clear_user_cart(user_id) 

            for item in cart_items:
                product_id = item.get('id')
                quantity = item.get('quantity')
                if product_id and quantity is not None:
                    update_cart_item_quantity(user_id, product_id, quantity)

            cart_count = sum(get_user_cart(user_id).values())
            await message.answer(
                f"–ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart_count}.",
                reply_markup=generate_main_menu(cart_count)
            )
            logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Web App. –¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞: {get_user_cart(user_id)}")

        elif action == 'checkout_order':
            order_details = data.get('order_details')
            cart_items = data.get('cart_items')
            total_amount = data.get('total_amount')

            if order_details and cart_items and total_amount is not None:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                order_summary = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
                order_summary += f"–ò–º—è: {order_details.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                order_summary += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_details.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                order_summary += f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {order_details.get('deliveryType', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

                if order_details.get('deliveryType') == 'courier':
                    order_summary += f"–ê–¥—Ä–µ—Å: {order_details.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    order_summary += f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order_details.get('deliveryTime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                elif order_details.get('deliveryType') == 'pickup':
                    order_summary += f"–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: {order_details.get('pickupAddress', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

                order_summary += "\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
                for item in cart_items:
                    order_summary += f"- {item.get('name')} x {item.get('quantity')} —à—Ç. ({item.get('price')} BYN/—à—Ç.)\n"
                order_summary += f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_amount} BYN"

                await message.answer(
                    f"–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n{order_summary}",
                    reply_markup=back_to_menu # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
                )
                clear_user_cart(user_id) # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
                logger.info(f"–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_menu)
                logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")
        else:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ Web App.", reply_markup=back_to_menu)
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {action}")

    except json.JSONDecodeError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {web_app_data_raw}")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=back_to_menu)
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=back_to_menu)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π
@dp.message(F.text)
async def block_text_input(message: Message):
    if message.text not in CATEGORY_MAP.keys() and \
       message.text not in ["‚ÑπÔ∏è –û –Ω–∞—Å", "üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞", "‚ö° –û –¥–æ—Å—Ç–∞–≤–∫–µ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"] and \
       not re.match(r"üõí –ö–æ—Ä–∑–∏–Ω–∞(\s\(\d+\))?", message.text) and \
       message.text != "/start":
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º üëá")


async def main():
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞...")
    await load_products_data()

    # –í–∫–ª—é—á–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è Web App –¥–∞–Ω–Ω—ã—Ö
    dp.message.register(handle_web_app_data, F.web_app_data)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    # –ò–ó–ú–ï–ù–ï–ù–û: setup_api_server —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç runner
    runner = await setup_api_server() 
    port = int(os.environ.get("PORT", 8080)) # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8080
    site = web.TCPSite(runner, '0.0.0.0', port) # –°–æ–∑–¥–∞–µ–º TCPSite
    await site.start() # –ó–∞–ø—É—Å–∫–∞–µ–º TCPSite —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å
    logger.info(f"API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ API —Å–µ—Ä–≤–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    bot_polling_task = asyncio.create_task(dp.start_polling(bot))

    try:
        await bot_polling_task
    except asyncio.CancelledError:
        pass
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ runner –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        await runner.cleanup()
        logger.info("API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    asyncio.run(main())
