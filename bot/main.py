import asyncio
import logging
import json
import os
import re
import smtplib
import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, 
    KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
)
from aiohttp import web  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º web –¥–ª—è TCPSite

from .api_server import setup_api_server  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è setup_api_server
from .config import (
    BOT_TOKEN, BASE_WEBAPP_URL, ADMIN_CHAT_ID, ADMIN_EMAIL
)  # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ADMIN_CHAT_ID –∏ ADMIN_EMAIL
from .keyboards import generate_main_menu


# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PRODUCTS_DATA_FILE = os.path.join(BASE_DIR, 'data', 'products_scraped.json')
ORDER_COUNTER_FILE = os.path.join(BASE_DIR, 'data', 'order_counter.json')  # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—á–µ—Ç—á–∏–∫–∞

logger.info(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö: {PRODUCTS_DATA_FILE}")
logger.info(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—á–µ—Ç—á–∏–∫–∞: {ORDER_COUNTER_FILE}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
products_data = {}
order_counter = 0
last_reset_month = 0
# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º Lock –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Å—á–µ—Ç—á–∏–∫–∞
order_counter_lock = asyncio.Lock()


# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
CATEGORY_MAP = {
    "ü•® –í—ã–ø–µ—á–∫–∞": "category_bakery",
    "ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω—ã": "category_croissants",
    "üçû –†–µ–º–µ—Å–ª–µ–Ω–Ω—ã–π —Ö–ª–µ–±": "category_artisan_bread",
    "üç∞ –î–µ—Å–µ—Ä—Ç—ã": "category_desserts"
}

DELIVERY_MAP = {
    'courier': '–î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º',
    'pickup': '–°–∞–º–æ–≤—ã–≤–æ–∑'
}


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_carts = {}  # user_id: {product_id: quantity, ...}


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async def load_products_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    global products_data
    if os.path.exists(PRODUCTS_DATA_FILE):
        try:
            with open(PRODUCTS_DATA_FILE, 'r', encoding='utf-8') as f:
                products_data = json.load(f)
            logger.info(f"–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {PRODUCTS_DATA_FILE}. "
                       f"–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(products_data)}")
            for category, products in products_data.items():
                logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': –Ω–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞ '{PRODUCTS_DATA_FILE}': {e}")
            products_data = {}  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö: {e}")
            products_data = {}
    else:
        logger.warning(f"–§–∞–π–ª '{PRODUCTS_DATA_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                      f"–ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.")
        products_data = {}


# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
async def load_order_counter():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    global order_counter, last_reset_month
    async with order_counter_lock:
        if os.path.exists(ORDER_COUNTER_FILE):
            try:
                with open(ORDER_COUNTER_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    order_counter = data.get('counter', 0)
                    last_reset_month = data.get('month', datetime.datetime.now().month)
                logger.info(f"–°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {ORDER_COUNTER_FILE}: "
                           f"{order_counter}, –ú–µ—Å—è—Ü: {last_reset_month}")
            except (json.JSONDecodeError, FileNotFoundError) as e:
                logger.warning(f"–§–∞–π–ª —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {e}. "
                              f"–ù–∞—á–∏–Ω–∞–µ–º —Å 0.")
                order_counter = 0
                last_reset_month = datetime.datetime.now().month
            except Exception as e:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")
                order_counter = 0
                last_reset_month = datetime.datetime.now().month
        else:
            logger.warning(f"–§–∞–π–ª —Å—á–µ—Ç—á–∏–∫–∞ {ORDER_COUNTER_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å 0.")
            order_counter = 0
            last_reset_month = datetime.datetime.now().month


# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª
async def save_order_counter(counter_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª."""
    async with order_counter_lock:
        try:
            with open(ORDER_COUNTER_FILE, 'w', encoding='utf-8') as f:
                json.dump(counter_data, f, ensure_ascii=False, indent=4)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")


# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è generate_order_number —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–∞–π–ª–æ–º
async def generate_order_number():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—á–µ—Ç—á–∏–∫ –≤ —Ñ–∞–π–ª–µ.
    """
    global order_counter, last_reset_month

    try:
        now = datetime.datetime.now()
        current_month = now.month
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞. –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {current_month}, "
                   f"–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å: {last_reset_month}, —Å—á–µ—Ç—á–∏–∫: {order_counter}")

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        async with order_counter_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–µ—Å—è—Ü —Å–º–µ–Ω–∏–ª—Å—è
            if current_month != last_reset_month:
                logger.info(f"–°–º–µ–Ω–∏–ª—Å—è –º–µ—Å—è—Ü. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ —Å {order_counter} –Ω–∞ 0.")
                order_counter = 0
                last_reset_month = current_month

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            order_counter += 1
            logger.info(f"–°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ: {order_counter}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –≤ —Ñ–∞–π–ª
            try:
                await save_order_counter({'counter': order_counter, 'month': last_reset_month})
                logger.info(f"–°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {order_counter}")
            except Exception as save_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞: {save_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ —Å—á–µ—Ç—á–∏–∫
        day = now.strftime("%d")
        month = now.strftime("%m")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ —Ç—Ä–µ—Ö –∑–Ω–∞–∫–æ–≤
        order_sequence = str(order_counter).zfill(3)
        order_number = f"#{day}{month}/{order_sequence}"
        
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}")
        return order_number
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –∫–∞–∫ fallback
        fallback_number = f"#ERROR_{int(now.timestamp())}"
        logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {fallback_number}")
        return fallback_number


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def format_phone_telegram(phone: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç +37544746-01-99 –¥–ª—è Telegram.
    –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 375), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –≤–≤–µ–¥–µ–Ω–æ.
    """
    digits = re.sub(r'\D', '', phone)

    if digits.startswith('375') and len(digits) == 12:
        return f"+{digits[0:3]}{digits[3:5]}{digits[5:8]}-{digits[8:10]}-{digits[10:12]}"
    return phone


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
def get_user_cart(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return user_carts.setdefault(user_id, {})


def update_cart_item_quantity(user_id: int, product_id: str, quantity: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    cart = get_user_cart(user_id)
    if quantity <= 0:
        if product_id in cart:
            del cart[product_id]
    else:
        cart[product_id] = quantity
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {cart}")


def clear_user_cart(user_id: int):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id in user_carts:
        del user_carts[user_id]
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞.")


# –ó–ê–ì–õ–£–®–ö–ê: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ä–∑–∏–Ω—ã (–µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞)
# –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞–º–µ–Ω–∏ –µ–µ.
async def clear_user_cart_messages(chat_id: int):
    """–û—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)."""
    logger.info(f"–§—É–Ω–∫—Ü–∏—è clear_user_cart_messages –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}. (–ó–ê–ì–õ–£–®–ö–ê)")
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ä–±–∏–Ω—ã
    pass


# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
async def send_email_notification(recipient_email: str, subject: str, body: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email –Ω–∞ {recipient_email}")
        
        sender_email = ADMIN_EMAIL  # Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        sender_password = os.environ.get("ADMIN_EMAIL_PASSWORD")  # –ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        smtp_server = os.environ.get("SMTP_SERVER", "smtp.gmail.com")  # SMTP —Å–µ—Ä–≤–µ—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Gmail)
        smtp_port = int(os.environ.get("SMTP_PORT", 587))  # –ü–æ—Ä—Ç SMTP (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è TLS)

        if not sender_email or not sender_password:
            logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_EMAIL –∏–ª–∏ ADMIN_EMAIL_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. "
                        "Email –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return

        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP: —Å–µ—Ä–≤–µ—Ä={smtp_server}, –ø–æ—Ä—Ç={smtp_port}, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å={sender_email}")

        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = sender_email
        msg['To'] = recipient_email

        msg.attach(MIMEText(body, 'html', 'utf-8'))

        logger.info("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É...")
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º TLS...")
            server.starttls()  # –ù–∞—á–∞—Ç—å TLS —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            logger.info("–ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
            server.login(sender_email, sender_password)
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            server.send_message(msg)
            
        logger.info(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {recipient_email} —Å —Ç–µ–º–æ–π '{subject}'.")
        
    except smtplib.SMTPException as e:
        logger.error(f"–û—à–∏–±–∫–∞ SMTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –Ω–∞ {recipient_email}: {e}")


# –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text == "/start")
async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    cart_count = sum(get_user_cart(user_id).values())
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–µ–∫–∞—Ä–Ω–∏ –î—Ä–∞–∂–∏–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ, "
        "—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å.",
        reply_markup=generate_main_menu(cart_count)
    )


@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'."""
    await clear_user_cart_messages(message.chat.id)  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
    text = (
        "<b>–û –ø–µ–∫–∞—Ä–Ω–µ –î—Ä–∞–∂–∏–Ω–∞</b>\n\n"
        "–ù–∞—à–∞ –ø–µ–∫–∞—Ä–Ω—è ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. "
        "–ú—ã –≥–æ—Ç–æ–≤–∏–º —Ö–ª–µ–± –∏ –≤—ã–ø–µ—á–∫—É –ø–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º —Ä–µ—Ü–µ–ø—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.\n\n"
        "üåæ –†–µ–º–µ—Å–ª–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
        "üçû –°–≤–µ–∂–∞–π—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "‚ù§Ô∏è –õ—é–±–æ–≤—å –∫ —Å–≤–æ–µ–º—É –¥–µ–ª—É\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://drazhin.by/o-pekarne"
    )
    await message.answer(
        text, 
        parse_mode=ParseMode.HTML, 
        reply_markup=generate_main_menu(sum(get_user_cart(message.from_user.id).values()))
    )


@dp.message(F.text == "üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞")
async def show_addresses(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞'."""
    await clear_user_cart_messages(message.chat.id)  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
    text = (
        "<b>üìç –ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã</b>\n\n"
        "üè¨ <b>–¢–¶ \"Green City\"</b>\n"
        "—É–ª. –ü—Ä–∏—Ç—ã—Ü–∫–æ–≥–æ, 156, –Ω–∞–ø—Ä–æ—Ç–∏–≤ –ì—Ä–∏–Ω –°–∏—Ç–∏\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | "
        "<a href='https://yandex.com/maps/-/CHTIEUl9'>Yandex</a>\n\n"

        "üè¨ <b>–¢–¶ \"–ó–∞–º–æ–∫\"</b>\n"
        "–ø—Ä‚Äë—Ç –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, 65, 1 —ç—Ç–∞–∂ –≤–æ–∑–ª–µ ¬´–ò–≤ –†–æ—à–µ¬ª\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | "
        "<a href='https://yandex.com/maps/-/CHTIEJ3Z'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –õ. –ë–µ–¥—ã, 26</b>\n"
        "–≤—Ö–æ–¥ –≤ WINE&SPIRITS\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | "
        "<a href='https://yandex.com/maps/-/CHTIEXnX'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –ú—Å—Ç–∏—Å–ª–∞–≤—Ü–∞, 8</b>\n"
        "–≤ –ú–∞—è–∫ –ú–∏–Ω—Å–∫–∞, –≤—Ö–æ–¥ —Å–æ –¥–≤–æ—Ä–∞\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | "
        "<a href='https://yandex.com/maps/-/CHTIIYme'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –õ—É—á–µ–Ω–∫–∞, 1</b>\n"
        "–≤ –ñ–ö ¬´Minsk World¬ª\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | "
        "<a href='https://yandex.com/maps/-/CHTIII6lt'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –ê–≤–∏–∞—Ü–∏–æ–Ω–Ω–∞—è, 8</b>\n"
        "–ö–æ–ø–∏—â–µ, –ù–æ–≤–∞—è –ë–æ—Ä–æ–≤–∞—è\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | "
        "<a href='https://yandex.com/maps/-/CHTIIDl~'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –ù–æ–≤–æ–≤–∏–ª–µ–Ω—Å–∫–∞—è, 45</b>\n"
        "Minsk\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | "
        "<a href='https://yandex.com/maps/-/CHTIIDl~'>Yandex</a>\n\n"

        "üè† <b>—É–ª. –ú–æ—Ä—Å–∫–æ–π —Ä–∏—Ñ 1/4</b>\n"
        "–∞/–≥ –†–∞—Ç–æ–º–∫–∞, –ñ–ö ¬´–ü–∏—Ä—Å¬ª\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | "
        "<a href='https://yandex.com/maps/-/CHTIMRKA'>Yandex</a>\n\n"

        "üè† <b>–≥. –ó–∞—Å–ª–∞–≤–ª—å, —É–ª. –í–æ–∫–∑–∞–ª—å–Ω–∞—è, 11</b>\n"
        "—É –∂/–¥ —Å—Ç–∞–Ω—Ü–∏–∏ ¬´–ë–µ–ª–∞—Ä—É—Å—å¬ª\n"
        "üîó <a href='http://maps.google.com/maps?q=53.9006,27.5670'>Google</a> | "
        "<a href='https://yandex.com/maps/-/CHTIMOpa'>Yandex</a>\n\n"

        "<b>üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
        " +375 (29) 117‚Äë25‚Äë77\n"
        "üìß info@drazhin.by\n"
        "<a href='https://drazhin.by/kontakty'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    )
    await message.answer(
        text, 
        reply_markup=generate_main_menu(sum(get_user_cart(message.from_user.id).values())),
        disable_web_page_preview=True, 
        parse_mode=ParseMode.HTML
    )


@dp.message(F.text == "‚ö° –û –¥–æ—Å—Ç–∞–≤–∫–µ")
async def delivery_info(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –¥–æ—Å—Ç–∞–≤–∫–µ'."""
    await clear_user_cart_messages(message.chat.id)  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
    text = (
        "<b>üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞.\n"
        "‚ùóÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî <b>70 —Ä—É–±–ª–µ–π</b>.\n"
        "üî¥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –∏ –ø—Ä–µ–¥–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ ‚Äî <b>200 —Ä—É–±–ª–µ–π</b>.\n\n"
        "<b>üïí –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n"
        "–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å <b>12:30 –¥–æ 17:00</b>.\n"
        "<b>–î–µ–Ω—å –≤ –¥–µ–Ω—å</b>. –î–æ—Å—Ç–∞–≤–∏–º —Ç–æ–≤–∞—Ä—ã –¥–µ–Ω—å –≤ –¥–µ–Ω—å –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ <b>–¥–æ 11:00</b>.\n"
        "<b>–ù–∞ –∑–∞–≤—Ç—Ä–∞</b>. –ó–∞–∫–∞–∑—ã, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ <b>–ø–æ—Å–ª–µ 11:00</b>, –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.\n"
        "<b>üó∫ –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        "<a href=\"https://yandex.com/maps/157/minsk/?from=mapframe&ll=27.513432%2C53.935659&mode=usermaps&source=mapframe&um=constructor%3Acaf348232a3eb659f0e8355c6c34c51b8307a553b53ad5723ecfdb4ff43ad6da&utm_source=mapframe&z=10.6\">üìç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏</a>\n\n"
        "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π</b>\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +375 (29) 117‚Äë25‚Äë77\n"
        "üìß info@drazhin.by\n"
        "<a href='https://drazhin.by/kontakty'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>"
    )
    await message.answer(
        text, 
        reply_markup=generate_main_menu(sum(get_user_cart(message.from_user.id).values())),
        disable_web_page_preview=True, 
        parse_mode=ParseMode.HTML
    )


@dp.message(F.web_app_data)
async def handle_web_app_data(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App."""
    user_id = message.from_user.id
    web_app_data_raw = message.web_app_data.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {web_app_data_raw}")

    try:
        data = json.loads(web_app_data_raw)
        action = data.get('action')
        logger.info(f"–î–µ–π—Å—Ç–≤–∏–µ Web App: {action}")

        if action == 'update_cart':
            await _handle_update_cart(message, data, user_id)
        elif action == 'checkout_order':
            await _handle_checkout_order(message, data, user_id)
        else:
            await message.answer(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ Web App.", 
                reply_markup=generate_main_menu(sum(get_user_cart(user_id).values()))
            )
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {action}")

    except json.JSONDecodeError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {web_app_data_raw}")
        await message.answer(
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
            reply_markup=generate_main_menu(sum(get_user_cart(user_id).values()))
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=generate_main_menu(sum(get_user_cart(user_id).values()))
        )


async def _handle_update_cart(message: Message, data: dict, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ Web App."""
    cart_items = data.get('cart', [])
    current_cart = get_user_cart(user_id)

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    clear_user_cart(user_id)

    for item in cart_items:
        product_id = item.get('id')
        quantity = item.get('quantity')
        if product_id and quantity is not None:
            update_cart_item_quantity(user_id, product_id, quantity)

    cart_count = sum(get_user_cart(user_id).values())
    await message.answer(
        f"–ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart_count}.",
        reply_markup=generate_main_menu(cart_count)
    )
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Web App. "
               f"–¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞: {get_user_cart(user_id)}")


async def _handle_checkout_order(message: Message, data: dict, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ Web App."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        order_details = data.get('order_details')
        cart_items = data.get('cart_items')
        total_amount = data.get('total_amount')

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        if not order_details or not cart_items or total_amount is None:
            logger.error(f"–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. "
                        f"order_details: {order_details}, cart_items: {cart_items}, "
                        f"total_amount: {total_amount}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                reply_markup=generate_main_menu(sum(get_user_cart(user_id).values()))
            )
            return

        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤–∞–ª–∏–¥–Ω—ã. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞...")
        order_number = await generate_order_number()
        logger.info(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {order_number}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        try:
            await _send_order_notifications(order_details, cart_items, total_amount, order_number, user_id)
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as notification_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_error}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        logger.info(f"–û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        clear_user_cart(user_id)
        logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_number}.")

        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            f"<b>–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_number}</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=generate_main_menu(sum(get_user_cart(user_id).values()))
        )
        logger.info(f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.", 
            reply_markup=generate_main_menu(sum(get_user_cart(user_id).values()))
        )


async def _send_order_notifications(order_details: dict, cart_items: list, 
                                  total_amount: float, order_number: str, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_number}")
        
        delivery_method = order_details.get('deliveryMethod', 'N/A')
        delivery_text = DELIVERY_MAP.get(order_details.get('deliveryMethod'), 'N/A')
        phone_number = order_details.get('phone', 'N/A')
        formatted_phone = format_phone_telegram(phone_number)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        logger.info("–§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram...")
        telegram_order_summary = _format_telegram_order_summary(
            order_number, order_details, cart_items, total_amount, 
            formatted_phone, delivery_text
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ")

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram
        if ADMIN_CHAT_ID:
            try:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram. Chat ID: {ADMIN_CHAT_ID}")
                await bot.send_message(
                    chat_id=int(ADMIN_CHAT_ID),
                    text=telegram_order_summary,
                    parse_mode=ParseMode.MARKDOWN
                )
                logger.info(f"–ó–∞–∫–∞–∑ {order_number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} "
                           f"—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ {order_number} "
                            f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram. ID —á–∞—Ç–∞: {ADMIN_CHAT_ID}. –û—à–∏–±–∫–∞: {e}")
        else:
            logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. "
                          "–ó–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram.")

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ email –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        logger.info("–§–æ—Ä–º–∏—Ä—É–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
        email_subject = (f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {order_number} –æ—Ç "
                        f"{order_details.get('firstName', '')} {order_details.get('lastName', '')} - "
                        f"{total_amount:.2f} —Ä.")
        email_body = _format_email_body(order_number, order_details, cart_items, 
                                       total_amount, delivery_text)
        logger.info("Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ")

        if ADMIN_EMAIL:
            admin_email_password = os.environ.get("ADMIN_EMAIL_PASSWORD")
            if admin_email_password:
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {ADMIN_EMAIL}")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                asyncio.create_task(send_email_notification(ADMIN_EMAIL, email_subject, email_body))
                logger.info("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å–æ–∑–¥–∞–Ω–∞")
            else:
                logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_EMAIL_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. "
                            "Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            logger.warning("ADMIN_EMAIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            
        logger.info(f"–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_number} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_number}: {e}")
        raise  # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ


def _format_telegram_order_summary(order_number: str, order_details: dict, 
                                  cart_items: list, total_amount: float,
                                  formatted_phone: str, delivery_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è Telegram."""
    summary = (f"*–ù–û–í–´–ô –ó–ê–ö–ê–ó {order_number}*\n\n"
               f"*–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:*\n"
               f"–§–∞–º–∏–ª–∏—è: `{order_details.get('lastName', 'N/A')}`\n"
               f"–ò–º—è: `{order_details.get('firstName', 'N/A')}`\n"
               f"–û—Ç—á–µ—Å—Ç–≤–æ: `{order_details.get('middleName', 'N/A')}`\n"
               f"–¢–µ–ª–µ—Ñ–æ–Ω: `{formatted_phone}`\n"
               f"Email: `{order_details.get('email', 'N/A')}`\n"
               f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏/—Å–∞–º–æ–≤—ã–≤–æ–∑–∞: `{order_details.get('deliveryDate', 'N/A')}`\n\n")

    summary += f"*–î–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ:* \n"
    if order_details.get('deliveryMethod') == 'courier':
        summary += (f"–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery_text}\n"
                   f"–ì–æ—Ä–æ–¥: `{order_details.get('city', 'N/A')}`\n"
                   f"–ê–¥—Ä–µ—Å: `{order_details.get('addressLine', 'N/A')}`\n")
        if order_details.get('comment'):
            summary += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Å—Ç–∞–≤–∫–µ: `{order_details.get('comment', 'N/A')}`\n"
    elif order_details.get('deliveryMethod') == 'pickup':
        summary += (f"–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery_text}\n"
                   f"–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: `{order_details.get('pickupAddress', 'N/A')}`\n")

    summary += f"\n*–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n"
    for item in cart_items:
        price_float = float(item.get('price', 0))
        total_item_float = (float(item.get('total', 0)) if item.get('total') is not None 
                           else (price_float * item.get('quantity', 0)))
        summary += (f"- `{item.get('name', 'N/A')}` x `{item.get('quantity', 0)}` —à—Ç. "
                   f"(`{price_float:.2f}` —Ä. / —à—Ç.) = `{total_item_float:.2f}` —Ä.\n")

    summary += f"\n*–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* `{total_amount:.2f}` —Ä."
    return summary


def _format_email_body(order_number: str, order_details: dict, cart_items: list,
                      total_amount: float, delivery_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –¥–ª—è email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –≤ HTML
    courier_city = ("<p><b>–ì–æ—Ä–æ–¥:</b> " + order_details.get('city', 'N/A') + "</p>" 
                   if order_details.get('deliveryMethod') == 'courier' else "")
    courier_address = ("<p><b>–ê–¥—Ä–µ—Å:</b> " + order_details.get('addressLine', 'N/A') + "</p>" 
                      if order_details.get('deliveryMethod') == 'courier' else "")
    courier_comment = ("<p><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Å—Ç–∞–≤–∫–µ:</b> " + order_details.get('comment', 'N/A') + "</p>" 
                      if (order_details.get('deliveryMethod') == 'courier' and order_details.get('comment')) else "")
    pickup_address = ("<p><b>–ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:</b> " + order_details.get('pickupAddress', 'N/A') + "</p>" 
                     if order_details.get('deliveryMethod') == 'pickup' else "")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    table_rows = ""
    for item in cart_items:
        total_item = (float(item.get('total', 0)) if item.get('total') is not None 
                     else (float(item.get('price', 0)) * item.get('quantity', 0)))
        table_rows += f"""
                                                <tr>
                                                    <td>{item.get('name', 'N/A')}</td>
                                                    <td>{item.get('quantity', 0)} —à—Ç.</td>
                                                    <td>{float(item.get('price', 0)):.2f} —Ä.</td>
                                                    <td>{total_item:.2f} —Ä.</td>
                                                </tr>
                                                """

    email_body = f"""
                    <html>
                    <head></head>
                    <body>
                        <h2>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {order_number}</h2>
                        <h3>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</h3>
                        <ul>
                            <li><b>–§–∞–º–∏–ª–∏—è:</b> {order_details.get('lastName', 'N/A')}</li>
                            <li><b>–ò–º—è:</b> {order_details.get('firstName', 'N/A')}</li>
                            <li><b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> {order_details.get('middleName', 'N/A')}</li>
                            <li><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_details.get('phone', 'N/A')}</li>
                            <li><b>Email:</b> {order_details.get('email', 'N/A')}</li>
                            <li><b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏/—Å–∞–º–æ–≤—ã–≤–æ–∑–∞:</b> {order_details.get('deliveryDate', 'N/A')}</li>
                        </ul>
                        <h3>–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery_text}</h3>
                        {courier_city}
                        {courier_address}
                        {courier_comment}
                        {pickup_address}

                        <h3>üõçÔ∏è –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</h3>
                        <table border="1" cellpadding="5" cellspacing="0" style="width:100%; border-collapse: collapse;">
                            <thead>
                                <tr>
                                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                    <th>–ö–æ–ª-–≤–æ</th>
                                    <th>–¶–µ–Ω–∞ –∑–∞ —à—Ç.</th>
                                    <th>–í—Å–µ–≥–æ</th>
                                </tr>
                            </thead>
                            <tbody>
                                {table_rows}
                            </tbody>
                        </table>
                        <h3>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount:.2f} —Ä.</h3>
                    </body>
                    </html>
                    """
    return email_body


@dp.message(F.text)
async def block_text_input(message: Message):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π."""
    allowed_texts = list(CATEGORY_MAP.keys()) + [
        "‚ÑπÔ∏è –û –Ω–∞—Å", "üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞", "‚ö° –û –¥–æ—Å—Ç–∞–≤–∫–µ", "/start"
    ]
    
    if (message.text not in allowed_texts and 
        not re.match(r"üõí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É(\s\(\d+\))?", message.text)):
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º üëá")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞...")
    await load_products_data()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
    await load_order_counter()

    # –í–∫–ª—é—á–µ–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è Web App –¥–∞–Ω–Ω—ã—Ö
    dp.message.register(handle_web_app_data, F.web_app_data)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    runner = await setup_api_server()
    port = int(os.environ.get("PORT", 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)

    web_server_task = asyncio.create_task(site.start())
    bot_polling_task = asyncio.create_task(dp.start_polling(bot))

    logger.info(f"API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:{port}")
    logger.info("–ë–æ—Ç –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å...")

    try:
        await asyncio.gather(bot_polling_task, web_server_task)
    except asyncio.CancelledError:
        pass
    finally:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
        await runner.cleanup()
        logger.info("API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")


if __name__ == "__main__":
    asyncio.run(main())