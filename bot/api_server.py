import json
import logging
import os
import time
import hmac
import hashlib
import base64
import ssl
import aiohttp
from aiohttp import web
import aiohttp_cors
from collections import defaultdict

from bot.config import config
from bot.security_manager import security_manager
from bot.security_headers import security_headers_middleware, create_content_hash

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞
logger = logging.getLogger(__name__)
if not logger.handlers:
    logging.basicConfig(level=getattr(logging, config.LOG_LEVEL), format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PRODUCTS_DATA_FILE = os.path.join(BASE_DIR, 'data', 'products_scraped.json')

# MODX API Configuration
MODX_API_BASE_URL = os.environ.get('MODX_API_BASE_URL', 'https://drazhin.by')
MODX_API_TIMEOUT = int(os.environ.get('MODX_API_TIMEOUT', '10'))

# ===== SECURITY CONFIGURATION =====
# HMAC secret key for request signing (should be in environment variables)
HMAC_SECRET = os.environ.get('HMAC_SECRET', 'default-secret-key-change-in-production')
HMAC_ALGORITHM = 'sha256'

# Rate limiting configuration
RATE_LIMIT_REQUESTS_PER_HOUR = 100  # Max requests per hour per IP
RATE_LIMIT_BLOCK_DURATION = 3600    # Block duration in seconds (1 hour)

# In-memory storage for rate limiting (in production, use Redis)
rate_limit_storage = defaultdict(list)

# ===== HMAC SIGNATURE FUNCTIONS =====
def generate_hmac_signature(data: str, secret: str) -> str:
    """Generate HMAC signature for data"""
    signature = hmac.new(
        secret.encode('utf-8'),
        data.encode('utf-8'),
        hashlib.sha256
    ).digest()
    return base64.b64encode(signature).decode('utf-8')

def verify_hmac_signature(data: str, signature: str, secret: str) -> bool:
    """Verify HMAC signature"""
    expected_signature = generate_hmac_signature(data, secret)
    return hmac.compare_digest(signature, expected_signature)

# ===== MODX API FUNCTIONS =====
async def load_products_from_modx_api(category_id: str = None) -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ MODX API"""
    try:
        url = f"{MODX_API_BASE_URL}/api-products.json"
        params = {'category': category_id} if category_id else {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è Heroku
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        connector = aiohttp.TCPConnector(ssl=ssl_context)
        
        async with aiohttp.ClientSession(
            connector=connector,
            timeout=aiohttp.ClientTimeout(total=MODX_API_TIMEOUT)
        ) as session:
            logger.info(f"API: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ MODX API: {url}")
            async with session.get(url, params=params) as response:
                logger.info(f"API: MODX API –æ—Ç–≤–µ—Ç: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"API: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {data.get('count', 0)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ MODX API")
                    return data.get('products', [])
                else:
                    text = await response.text()
                    logger.error(f"API: –û—à–∏–±–∫–∞ MODX API: {response.status} - {text}")
                    return []
    except Exception as e:
        logger.error(f"API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ MODX API: {e}")
        return []

async def load_categories_from_modx_api() -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ MODX API"""
    try:
        url = f"{MODX_API_BASE_URL}/api-categories.json"
        logger.info(f"API: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ MODX API: {url}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è Heroku
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        connector = aiohttp.TCPConnector(ssl=ssl_context)
        
        async with aiohttp.ClientSession(
            connector=connector,
            timeout=aiohttp.ClientTimeout(total=MODX_API_TIMEOUT)
        ) as session:
            logger.info(f"API: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ {url}")
            async with session.get(url) as response:
                logger.info(f"API: MODX API –æ—Ç–≤–µ—Ç: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"API: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {data.get('count', 0)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ MODX API")
                    logger.info(f"API: –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('categories', [{}])[0] if data.get('categories') else 'None'}")
                    return data.get('categories', [])
                else:
                    text = await response.text()
                    logger.error(f"API: –û—à–∏–±–∫–∞ MODX API: {response.status} - {text}")
                    return []
    except Exception as e:
        logger.error(f"API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ MODX API: {e}")
        import traceback
        logger.error(f"API: Traceback: {traceback.format_exc()}")
        return []

# ===== RATE LIMITING FUNCTIONS =====
def check_rate_limit(ip_address: str) -> bool:
    """Check if IP address is within rate limits"""
    current_time = time.time()
    
    # Clean old entries
    rate_limit_storage[ip_address] = [
        timestamp for timestamp in rate_limit_storage[ip_address]
        if current_time - timestamp < 3600  # Keep only last hour
    ]
    
    # Check if limit exceeded
    if len(rate_limit_storage[ip_address]) >= RATE_LIMIT_REQUESTS_PER_HOUR:
        return False
    
    # Add current request
    rate_limit_storage[ip_address].append(current_time)
    return True

# ===== TOKEN GENERATION =====
def generate_auth_token() -> dict:
    """Generate authentication token for client"""
    timestamp = int(time.time())
    token_data = f"auth:{timestamp}"
    signature = generate_hmac_signature(token_data, HMAC_SECRET)
    
    return {
        "token": signature,
        "timestamp": timestamp,
        "expires_in": 3600  # 1 hour
    }

async def get_auth_token(request):
    """Generate authentication token for client"""
    client_ip = request.remote
    
    # Basic rate limiting for token requests (more strict)
    if not check_rate_limit(f"{client_ip}:token"):
        logger.warning(f"API: Token rate limit exceeded for IP {client_ip}")
        return web.json_response({"error": "Token rate limit exceeded"}, status=429)
    
    token_data = generate_auth_token()
    logger.info(f"API: Generated auth token for IP {client_ip}")
    
    return web.json_response(token_data, headers={
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
    })

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏ Web App
WEB_APP_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'web_app')
logger.info(f"API: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Web App: {WEB_APP_DIR}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
products_data = {}

# API rate limiting store
api_rate_limit_store = defaultdict(list)

async def load_products_data_for_api():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞ –¥–ª—è API."""
    global products_data
    if os.path.exists(PRODUCTS_DATA_FILE):
        try:
            with open(PRODUCTS_DATA_FILE, 'r', encoding='utf-8') as f:
                products_data = json.load(f)
            logger.info(f"API: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {PRODUCTS_DATA_FILE}.")
        except json.JSONDecodeError as e:
            logger.error(f"API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞ '{PRODUCTS_DATA_FILE}': {e}")
            products_data = {} # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        except Exception as e:
            logger.error(f"API: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö: {e}")
            products_data = {}
    else:
        logger.warning(f"API: –§–∞–π–ª '{PRODUCTS_DATA_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω. API –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.")
        products_data = {}

async def check_api_rate_limit(request, action: str = "api_request") -> bool:
    """Check API rate limiting."""
    if not config.ENABLE_RATE_LIMITING:
        return True
    
    # Get client IP
    client_ip = request.headers.get('X-Forwarded-For', request.remote)
    if not client_ip:
        client_ip = "unknown"
    
    current_time = time.time()
    key = f"api_{client_ip}_{action}"
    
    # Clean old entries
    api_rate_limit_store[key] = [
        timestamp for timestamp in api_rate_limit_store[key]
        if current_time - timestamp < config.RATE_LIMIT_WINDOW
    ]
    
    # Check if limit exceeded
    if len(api_rate_limit_store[key]) >= config.RATE_LIMIT_MAX_REQUESTS:
        logger.warning(f"üö´ API rate limit exceeded for IP {client_ip}, action: {action}")
        security_manager._log_security_event("api_rate_limit_exceeded", {
            "client_ip": client_ip,
            "action": action,
            "current_count": len(api_rate_limit_store[key])
        })
        return False
    
    # Add current request
    api_rate_limit_store[key].append(current_time)
    return True

async def get_products_for_webapp(request):
    """–û—Ç–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –¥–ª—è Web App, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    
    # ===== RATE LIMITING =====
    client_ip = request.remote
    if not check_rate_limit(client_ip):
        logger.warning(f"API: Rate limit exceeded for IP {client_ip}")
        return web.json_response({"error": "Rate limit exceeded"}, status=429, headers={
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        })
    
    # ===== HMAC SIGNATURE VERIFICATION =====
    signature = request.headers.get('X-Signature')
    timestamp = request.headers.get('X-Timestamp')
    init_data = request.headers.get('X-Telegram-Init-Data', '')
    
    if not signature or not timestamp:
        logger.warning(f"API: Missing signature or timestamp from {client_ip}")
        return web.json_response({"error": "Missing signature"}, status=403, headers={
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        })
    
    # Check timestamp (prevent replay attacks)
    current_time = int(time.time())
    request_time = int(timestamp)
    if abs(current_time - request_time) > 300:  # 5 minutes tolerance
        logger.warning(f"API: Timestamp too old from {client_ip}")
        return web.json_response({"error": "Request expired"}, status=403, headers={
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        })
    
    # Use Telegram initData as secret (unique per session)
    hmac_secret = init_data if init_data else HMAC_SECRET
    
    # Verify signature
    request_data = f"{request.method}:{request.path}:{timestamp}"
    if not verify_hmac_signature(request_data, signature, hmac_secret):
        logger.warning(f"API: Invalid signature from {client_ip}")
        return web.json_response({"error": "Invalid signature"}, status=403, headers={
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        })
    
    category_key = request.query.get('category')
    logger.info(f"API: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_key}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MODX API
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º category_key –≤ category_id –¥–ª—è MODX API
        category_id = None
        if category_key and category_key.startswith('category_'):
            category_id = category_key.replace('category_', '')
            logger.info(f"API: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º category_key '{category_key}' –≤ category_id '{category_id}'")
        
        products = await load_products_from_modx_api(category_id)
        
        if products:
            logger.info(f"API: –ü–æ–ª—É—á–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ MODX API")
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MODX API –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞ (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
            products_by_category = {}
            
            for product in products:
                try:
                    category_id = product['parent_id']
                    logger.info(f"API: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç {product['id']} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")
                except KeyError as e:
                    logger.error(f"API: –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}, –ø—Ä–æ–¥—É–∫—Ç: {product}")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–∞—Ä—Å–µ—Ä–∞
                category_key = f"category_{category_id}"
                
                if category_key not in products_by_category:
                    products_by_category[category_key] = []
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞
                try:
                    # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É –∏ –≤–µ—Å –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö
                    price_str = str(product.get('price', '0')).replace(' ', '').replace(',', '.')
                    weight_str = str(product.get('weight', '0')).replace(' ', '').replace(',', '.')
                    
                    formatted_product = {
                        "id": product['id'],
                        "name": product['pagetitle'],
                        "price": float(price_str) if price_str.replace('.', '').isdigit() else 0.0,
                        "weight": float(weight_str) if weight_str.replace('.', '').isdigit() else 0.0,
                        "image": product.get('image', ''),
                        "description": product.get('product_description', ''),
                        "category_name": product.get('category_name', ''),
                        "parent_id": product['parent_id'],
                        "menuindex": product.get('menuindex', 0)
                    }
                    
                    products_by_category[category_key].append(formatted_product)
                except (ValueError, KeyError) as e:
                    logger.error(f"API: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.get('id', 'unknown')}: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ menuindex
            for category_key in products_by_category:
                products_by_category[category_key].sort(key=lambda x: x.get('menuindex', 0))
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—ë
            if category_key:
                if category_key in products_by_category:
                    return web.json_response(products_by_category[category_key], headers={
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    })
                else:
                    return web.json_response([], headers={
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    })
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                return web.json_response(products_by_category, headers={
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                })
        else:
            logger.warning("API: MODX API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.")
            
            # FALLBACK: –ü–∞—Ä—Å–µ—Ä –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ MODX API
            # if products_data:
            #     if category_key:
            #         products_in_category = products_data.get(category_key, [])
            #         if not products_in_category:
            #             logger.warning(f"API: –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.")
            #             return web.json_response({"error": "Category not found or empty"}, status=404, headers={
            #                 'Cache-Control': 'no-cache, no-store, must-revalidate',
            #                 'Pragma': 'no-cache',
            #                 'Expires': '0'
            #             })
            #         return web.json_response(products_in_category, headers={
            #             'Cache-Control': 'no-cache, no-store, must-revalidate',
            #             'Pragma': 'no-cache',
            #             'Expires': '0'
            #         })
            #     else:
            #         return web.json_response(products_data, headers={
            #             'Cache-Control': 'no-cache, no-store, must-revalidate',
            #             'Pragma': 'no-cache',
            #             'Expires': '0'
            #         })
            
            return web.json_response({"error": "No products available from MODX API"}, status=404, headers={
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0'
            })
        
    except Exception as e:
        logger.error(f"API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        import traceback
        logger.error(f"API: Traceback: {traceback.format_exc()}")
        return web.json_response({"error": "Failed to load products"}, status=500, headers={
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        })

async def get_categories_for_webapp(request):
    """–û—Ç–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è Web App."""
    # Check rate limiting
    if not await check_api_rate_limit(request, "get_categories"):
        return web.json_response({"error": "Rate limit exceeded"}, status=429, headers={
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        })
    
    logger.info("API: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ MODX API
    try:
        categories = await load_categories_from_modx_api()
        
        logger.info(f"API: –ü–æ–ª—É—á–µ–Ω–æ {len(categories) if categories else 0} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ MODX API")
        if categories:
            logger.info(f"API: –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {categories[0] if categories else 'None'}")
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            categories_list = []
            for category in categories:
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–∞—Ä—Å–µ—Ä–∞
                category_key = f"category_{category['id']}"
                
                categories_list.append({
                    "key": category_key,
                    "name": category['name'],
                    "image": category.get('image', ''),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ MODX API
                    "menuindex": category.get('menuindex', 0)  # –î–æ–±–∞–≤–ª—è–µ–º menuindex –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            logger.info(f"API: –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {[f\"{cat['name']}({cat['menuindex']})\" for cat in categories_list]}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ menuindex
            categories_list.sort(key=lambda x: x.get('menuindex', 0))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            logger.info(f"API: –ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {[f\"{cat['name']}({cat['menuindex']})\" for cat in categories_list]}")
            
            logger.info(f"API: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(categories_list)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É")
            return web.json_response(categories_list, headers={
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0'
            })
        else:
            logger.warning("API: MODX API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.")
            
            # FALLBACK: –ü–∞—Ä—Å–µ—Ä –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ MODX API
            # if products_data:
            #     categories_list = []
            #     for key, products in products_data.items():
            #         if products: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
            #             # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            #             category_image = products[0].get('image', '')
            #             categories_list.append({
            #                 "key": key,
            #                 "name": products[0].get('category_name', key), # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            #                 "image": category_image
            #             })
            #     return web.json_response(categories_list, headers={
            #         'Cache-Control': 'no-cache, no-store, must-revalidate',
            #         'Pragma': 'no-cache',
            #         'Expires': '0'
            #     })
            
            return web.json_response({"error": "No categories available from MODX API"}, status=404, headers={
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0'
            })
        
    except Exception as e:
        logger.error(f"API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return web.json_response({"error": "Failed to load categories"}, status=500, headers={
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
        })

async def serve_main_app_page(request):
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π HTML —Ñ–∞–π–ª Web App."""
    logger.info(f"API: Serving index.html for Web App entry point: {request.path}")
    return web.FileResponse(os.path.join(WEB_APP_DIR, 'index.html'))

async def setup_api_server():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç AioHTTP Web Application Runner."""
    app = web.Application()

    # Add security headers middleware
    app.middlewares.append(security_headers_middleware)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ (–ü–ê–†–°–ï–† - –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù)
    # await load_products_data_for_api()

    # –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ –Ω–∞ '/bot-app/'
    app.router.add_get('/', lambda r: web.HTTPFound('/bot-app/'))

    # 1. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å '/bot-app'
    app.router.add_get('/bot-app/api/products', get_products_for_webapp)

    # 2. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å '/bot-app'
    app.router.add_get('/bot-app/api/categories', get_categories_for_webapp)
    
    # 3. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    app.router.add_get('/bot-app/api/auth/token', get_auth_token)

    # 3. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Web App
    app.router.add_get('/bot-app/', serve_main_app_page)

    # 4. –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ Web App (CSS, JS, images) –≤–Ω—É—Ç—Ä–∏ /bot-app/
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    async def serve_static_with_cache_control(request):
        """Serves static files with proper cache control headers."""
        file_path = request.match_info.get('filename', '')
        full_path = os.path.join(WEB_APP_DIR, file_path)
        
        if os.path.exists(full_path) and os.path.isfile(full_path):
            # Read file content first
            try:
                with open(full_path, 'rb') as f:
                    content = f.read()
            except Exception as e:
                logger.error(f"Error reading file {full_path}: {e}")
                return web.Response(status=500, text="Error reading file")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            content_type = 'text/html'
            if file_path.endswith('.css'):
                content_type = 'text/css'
            elif file_path.endswith('.js'):
                content_type = 'application/javascript'
            elif file_path.endswith('.png'):
                content_type = 'image/png'
            elif file_path.endswith('.jpg') or file_path.endswith('.jpeg'):
                content_type = 'image/jpeg'
            elif file_path.endswith('.svg'):
                content_type = 'image/svg+xml'
            

            
            # Check if file has version query parameter (e.g., ?v=1.2.0)
            query_string = request.query_string
            has_version = 'v=' in query_string
            
            # Create stable content hash for ETag
            content_hash = create_content_hash(content)
            
            if has_version:
                # Versioned files should be cached for a long time
                headers = {
                    'Content-Type': content_type,
                    'Cache-Control': 'public, max-age=31536000',  # 1 year
                    'ETag': f'"{content_hash}"'
                }
            else:
                # Non-versioned files should not be cached
                headers = {
                    'Content-Type': content_type,
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                }
            
            return web.Response(body=content, headers=headers)
        else:
            return web.Response(status=404, text="File not found")
    
    # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å —É–º–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    app.router.add_get(r'/bot-app/{filename:.+\.(css|js|png|jpg|jpeg|svg|ico)}', serve_static_with_cache_control)
    


    # 5. –ú–∞—Ä—à—Ä—É—Ç-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –ø—É—Ç–µ–π –≤–Ω—É—Ç—Ä–∏ /bot-app/, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    app.router.add_get('/bot-app/{tail:.*}', serve_main_app_page)

    # 6. Security.txt endpoint
    async def serve_security_txt(request):
        """Serve security.txt file."""
        security_txt_path = os.path.join(BASE_DIR, '.well-known', 'security.txt')
        if os.path.exists(security_txt_path):
            return web.FileResponse(security_txt_path, headers={'Content-Type': 'text/plain'})
        else:
            return web.Response(status=404, text="Security policy not found")

    app.router.add_get('/.well-known/security.txt', serve_security_txt)


        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞ Web App
    cors = aiohttp_cors.setup(app, defaults={
            "*" : aiohttp_cors.ResourceOptions(
                allow_credentials=False,  # Disabled for security
                expose_headers=["Content-Type", "Cache-Control", "ETag"],
                allow_headers=["Content-Type", "Accept", "Origin"],
                allow_methods=["GET", "POST", "PUT", "DELETE"]
            )
        })

    # –ü—Ä–∏–º–µ–Ω—è–µ–º CORS –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
    for route in list(app.router.routes()):
        cors.add(route)

    runner = web.AppRunner(app)
    await runner.setup()

    logger.info("API —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    return runner

if __name__ == '__main__':
    import asyncio
    async def main_api():
        runner = await setup_api_server()
        site = web.TCPSite(runner, '0.0.0.0', 8080)  # nosec B104 - Web server needs to bind to all interfaces
        await site.start()
        logger.info("API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞ http://0.0.0.0:8080")
        # Keep the server running indefinitely
        await asyncio.Event().wait() 

    asyncio.run(main_api())