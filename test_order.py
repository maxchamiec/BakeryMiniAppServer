#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ Bakery Mini App
"""

import json
import time
from datetime import datetime

def create_test_order():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    test_order = {
        "customer_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–∫—É–ø–∞—Ç–µ–ª—å",
        "customer_phone": "+375291234567",
        "customer_email": "test@example.com",
        "delivery_address": "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123, –ú–∏–Ω—Å–∫",
        "items": [
            {
                "product_id": "49",
                "quantity": 2,
                "price": "18",
                "name": "–ó–∞–≤–∏–≤–∞–Ω–µ—Ü —Å –º–∞–∫–æ–º"
            },
            {
                "product_id": "53",
                "quantity": 1,
                "price": "3.8",
                "name": "–ö—Ä—É–∞—Å—Å–∞–Ω –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π"
            },
            {
                "product_id": "68",
                "quantity": 1,
                "price": "9.5",
                "name": "–ü–µ—á–µ–Ω—å–µ ¬´–ö–∞–Ω—Ç—É—á—á–∏ —Å –º–∏–Ω–¥–∞–ª–µ–º¬ª"
            }
        ],
        "total_amount": "49.3",
        "privacy_consent": True,
        "order_date": datetime.now().isoformat(),
        "notes": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"
    }
    
    print("üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ó–ê–ö–ê–ó–ê")
    print("=" * 50)
    print(f"üë§ –ö–ª–∏–µ–Ω—Ç: {test_order['customer_name']}")
    print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {test_order['customer_phone']}")
    print(f"üìß Email: {test_order['customer_email']}")
    print(f"üìç –ê–¥—Ä–µ—Å: {test_order['delivery_address']}")
    print(f"üí∞ –°—É–º–º–∞: {test_order['total_amount']} BYN")
    print(f"‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö: {'–î–∞' if test_order['privacy_consent'] else '–ù–µ—Ç'}")
    print()
    
    print("üõí –¢–û–í–ê–†–´ –í –ó–ê–ö–ê–ó–ï:")
    print("-" * 30)
    for i, item in enumerate(test_order['items'], 1):
        print(f"{i}. {item['name']}")
        print(f"   ID: {item['product_id']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.")
        print(f"   –¶–µ–Ω–∞: {item['price']} BYN")
        print(f"   –°—É–º–º–∞: {float(item['price']) * item['quantity']} BYN")
        print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ñ–∞–π–ª
    order_id = f"test_order_{int(time.time())}"
    filename = f"data/{order_id}.json"
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(test_order, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        print(f"üÜî ID –∑–∞–∫–∞–∑–∞: {order_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
        try:
            with open('data/order_counter.json', 'r', encoding='utf-8') as f:
                counter = json.load(f)
        except FileNotFoundError:
            counter = {"count": 0}
        
        counter["count"] = counter.get("count", 0) + 1
        counter["last_order"] = order_id
        counter["last_order_date"] = datetime.now().isoformat()
        
        with open('data/order_counter.json', 'w', encoding='utf-8') as f:
            json.dump(counter, f, indent=2, ensure_ascii=False)
        
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {counter['count']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        return False
    
    return True

def simulate_order_processing():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞"""
    print("‚öôÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–ê")
    print("=" * 30)
    
    steps = [
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞...",
        "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤...",
        "–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏...",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤...",
        "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Å–∏—Å—Ç–µ–º–µ...",
        "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É...",
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ–∫–∞—Ä–Ω–∏..."
    ]
    
    for i, step in enumerate(steps, 1):
        print(f"{i}. {step}")
        time.sleep(0.5)
        print("   ‚úÖ –ì–æ—Ç–æ–≤–æ")
    
    print()
    print("üéâ –ó–ê–ö–ê–ó –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù!")
    print("üìß –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    print("üè™ –ü–µ–∫–∞—Ä–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ")

if __name__ == "__main__":
    print("üçû BAKERY MINI APP - –¢–ï–°–¢–û–í–´–ô –ó–ê–ö–ê–ó")
    print("=" * 50)
    print()
    
    if create_test_order():
        print()
        simulate_order_processing()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑")
