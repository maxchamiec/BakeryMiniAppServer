#!/usr/bin/env python3
"""
–¢–µ—Å—Ç MODX API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ Heroku
"""
import asyncio
import aiohttp
import ssl
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –≤ api_server.py
MODX_API_BASE_URL = os.environ.get('MODX_API_BASE_URL', 'https://drazhin.by/api')
MODX_API_TIMEOUT = int(os.environ.get('MODX_API_TIMEOUT', '10'))

async def test_modx_categories():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞–∫ –≤ api_server.py"""
    try:
        url = f"{MODX_API_BASE_URL}/categories.php"
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {url}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è Heroku
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        connector = aiohttp.TCPConnector(ssl=ssl_context)
        
        async with aiohttp.ClientSession(
            connector=connector,
            timeout=aiohttp.ClientTimeout(total=MODX_API_TIMEOUT)
        ) as session:
            print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ MODX API...")
            async with session.get(url) as response:
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                    print(f"üìã –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {json.dumps(data[0], ensure_ascii=False, indent=2)}")
                    return data
                else:
                    text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ MODX API: {response.status} - {text}")
                    return []
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        import traceback
        print(f"üìú Traceback: {traceback.format_exc()}")
        return []

async def test_modx_products():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞–∫ –≤ api_server.py"""
    try:
        url = f"{MODX_API_BASE_URL}/products.php"
        params = {'category': '17'}  # –í—ã–ø–µ—á–∫–∞
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è Heroku
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        connector = aiohttp.TCPConnector(ssl=ssl_context)
        
        async with aiohttp.ClientSession(
            connector=connector,
            timeout=aiohttp.ClientTimeout(total=MODX_API_TIMEOUT)
        ) as session:
            print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ MODX API...")
            async with session.get(url, params=params) as response:
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                    if data:
                        print(f"üìã –ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç: {json.dumps(data[0], ensure_ascii=False, indent=2)}")
                    return data
                else:
                    text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ MODX API: {response.status} - {text}")
                    return []
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        import traceback
        print(f"üìú Traceback: {traceback.format_exc()}")
        return []

async def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º MODX API –Ω–∞ Heroku...")
    print(f"üåê MODX_API_BASE_URL: {MODX_API_BASE_URL}")
    print(f"‚è±Ô∏è MODX_API_TIMEOUT: {MODX_API_TIMEOUT}")
    print()
    
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    categories = await test_modx_categories()
    print()
    
    print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã:")
    products = await test_modx_products()
    print()
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())

