#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–¥—É–∫—Ç–æ–≤
"""

import asyncio
import logging
import os
import sys
import json
import time
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.parser import main as parser_main

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º job
JOB_CONTROL_FILE = "data/parser_job_control.json"
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) - 3 –º–∏–Ω—É—Ç—ã
PARSER_INTERVAL = 3 * 60  # 180 —Å–µ–∫—É–Ω–¥

class ParserJobController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    
    def __init__(self):
        self.control_file = Path(JOB_CONTROL_FILE)
        self.ensure_control_file()
    
    def ensure_control_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if not self.control_file.exists():
            self.control_file.parent.mkdir(parents=True, exist_ok=True)
            default_config = {
                "enabled": False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω
                "last_run": None,
                "next_run": None,
                "run_count": 0,
                "last_success": None,
                "last_error": None,
                "created_at": datetime.now().isoformat()
            }
            with open(self.control_file, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=2, ensure_ascii=False)
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {self.control_file}")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.control_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {"enabled": False}
    
    def save_config(self, config):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.control_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def is_enabled(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥"""
        config = self.load_config()
        return config.get("enabled", False)
    
    def enable(self):
        """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥"""
        config = self.load_config()
        config["enabled"] = True
        config["next_run"] = datetime.now().isoformat()
        self.save_config(config)
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω")
    
    def disable(self):
        """–í—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥"""
        config = self.load_config()
        config["enabled"] = False
        config["next_run"] = None
        self.save_config(config)
        logger.info("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω")
    
    def update_last_run(self, success=True, error=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—É—Å–∫–µ"""
        config = self.load_config()
        config["last_run"] = datetime.now().isoformat()
        config["run_count"] = config.get("run_count", 0) + 1
        
        if success:
            config["last_success"] = config["last_run"]
            config["last_error"] = None
        else:
            config["last_error"] = config["last_run"]
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if config.get("enabled", False):
            next_run_time = datetime.now().timestamp() + PARSER_INTERVAL
            config["next_run"] = datetime.fromtimestamp(next_run_time).isoformat()
        
        self.save_config(config)
    
    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        config = self.load_config()
        return {
            "enabled": config.get("enabled", False),
            "last_run": config.get("last_run"),
            "next_run": config.get("next_run"),
            "run_count": config.get("run_count", 0),
            "last_success": config.get("last_success"),
            "last_error": config.get("last_error"),
            "interval_minutes": PARSER_INTERVAL // 60
        }

async def run_parser():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        start_time = time.time()
        
        await parser_main()
        
        end_time = time.time()
        duration = end_time - start_time
        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        return False

async def main_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    controller = ParserJobController()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    logger.info(f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª: {PARSER_INTERVAL // 60} –º–∏–Ω—É—Ç")
    logger.info(f"üìÅ –§–∞–π–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {JOB_CONTROL_FILE}")
    
    while True:
        try:
            if controller.is_enabled():
                logger.info("‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞")
                success = await run_parser()
                controller.update_last_run(success=success)
            else:
                logger.debug("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(PARSER_INTERVAL)
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            break
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            controller.update_last_run(success=False, error=str(e))
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    controller = ParserJobController()
    status = controller.get_status()
    
    print("\n" + "="*50)
    print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("="*50)
    print(f"üîÑ –í–∫–ª—é—á–µ–Ω: {'‚úÖ –î–ê' if status['enabled'] else '‚ùå –ù–ï–¢'}")
    print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: {status['interval_minutes']} –º–∏–Ω—É—Ç")
    print(f"üî¢ –ó–∞–ø—É—Å–∫–æ–≤: {status['run_count']}")
    
    if status['last_run']:
        print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {status['last_run']}")
    
    if status['next_run']:
        print(f"‚è≠Ô∏è  –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {status['next_run']}")
    
    if status['last_success']:
        print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö: {status['last_success']}")
    
    if status['last_error']:
        print(f"‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {status['last_error']}")
    
    print("="*50)

def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    print("\n" + "="*50)
    print("üìñ –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú")
    print("="*50)
    print("python parser_job.py start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥")
    print("python parser_job.py stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥")
    print("python parser_job.py enable    - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥")
    print("python parser_job.py disable   - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥")
    print("python parser_job.py status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    print("python parser_job.py run-once  - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–∏–Ω —Ä–∞–∑")
    print("python parser_job.py help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
    print("="*50)

async def run_once():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–∏–Ω —Ä–∞–∑"""
    controller = ParserJobController()
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    success = await run_parser()
    controller.update_last_run(success=success)
    return success

if __name__ == "__main__":
    if len(sys.argv) < 2:
        show_help()
        sys.exit(1)
    
    command = sys.argv[1].lower()
    
    if command == "start":
        asyncio.run(main_loop())
    elif command == "enable":
        controller = ParserJobController()
        controller.enable()
        show_status()
    elif command == "disable":
        controller = ParserJobController()
        controller.disable()
        show_status()
    elif command == "status":
        show_status()
    elif command == "run-once":
        success = asyncio.run(run_once())
        sys.exit(0 if success else 1)
    elif command == "help":
        show_help()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        show_help()
        sys.exit(1)
